// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/samb233/easyblog/internal/data/ent/index"
)

// Index is the model entity for the Index schema.
type Index struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// ContentID holds the value of the "content_id" field.
	ContentID int32 `json:"content_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Attr holds the value of the "attr" field.
	Attr int32 `json:"attr,omitempty"`
	// View holds the value of the "view" field.
	View int32 `json:"view,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// State holds the value of the "state" field.
	State int8 `json:"state,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Index) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case index.FieldID, index.FieldContentID, index.FieldAttr, index.FieldView, index.FieldState:
			values[i] = new(sql.NullInt64)
		case index.FieldTitle, index.FieldDesc:
			values[i] = new(sql.NullString)
		case index.FieldCreatedAt, index.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Index", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Index fields.
func (i *Index) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case index.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int32(value.Int64)
		case index.FieldContentID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field content_id", values[j])
			} else if value.Valid {
				i.ContentID = int32(value.Int64)
			}
		case index.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case index.FieldDesc:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[j])
			} else if value.Valid {
				i.Desc = value.String
			}
		case index.FieldAttr:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attr", values[j])
			} else if value.Valid {
				i.Attr = int32(value.Int64)
			}
		case index.FieldView:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view", values[j])
			} else if value.Valid {
				i.View = int32(value.Int64)
			}
		case index.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case index.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case index.FieldState:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[j])
			} else if value.Valid {
				i.State = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Index.
// Note that you need to call Index.Unwrap() before calling this method if this Index
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Index) Update() *IndexUpdateOne {
	return (&IndexClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Index entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Index) Unwrap() *Index {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Index is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Index) String() string {
	var builder strings.Builder
	builder.WriteString("Index(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", content_id=")
	builder.WriteString(fmt.Sprintf("%v", i.ContentID))
	builder.WriteString(", title=")
	builder.WriteString(i.Title)
	builder.WriteString(", desc=")
	builder.WriteString(i.Desc)
	builder.WriteString(", attr=")
	builder.WriteString(fmt.Sprintf("%v", i.Attr))
	builder.WriteString(", view=")
	builder.WriteString(fmt.Sprintf("%v", i.View))
	builder.WriteString(", created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", i.State))
	builder.WriteByte(')')
	return builder.String()
}

// Indexes is a parsable slice of Index.
type Indexes []*Index

func (i Indexes) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
